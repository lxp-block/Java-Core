1.TIJ generice/Fibonacci p360
2.对于一个static方法，无法访问泛型类的类型参数，如果static方法要使用泛型，需要使其成为泛型方法。
    public class A{
    public <T> getT(T t){
    return t;
    }}
3.当使用泛型类时，必须在创建对象是指定类型参数的值，而使用泛型方法时，通常不用指明类型参数的值，
编译器会通过 参数类型推断 找出具体的值。
4.在泛型代码内部，无获得有关泛型参数类型的信息。
5.p378
6.isInstance(Object obj)
 判定指定的 Object 是否与此 Class 所表示的对象赋值兼容。此方法是 Java 语言 instanceof 运算符的动态等效方法。
 如果指定的 Object 参数非空，且能够在不引发 ClassCastException 的情况下
 被强制转换成该 Class 对象所表示的引用类型，则该方法返回 true；否则返回 false。
 特别地，当该 Class 对象表示一个已声明的类时，若指定的 Object 参数是所表示类（或其任一子类）的一个实例，
 则此方法返回 true；否则返回 false。
 如果此 Class 对象表示一个数组类，且通过身份转换或扩展引用转换，指定的 Object 参数能转换为一个数组类的对象，
 则返回 true；否则返回 false。
 如果此 Class 对象表示一个接口，且指定 Object 参数的类或任一超类实现了此接口，则此方法返回 true；否则返回 false。
 如果此 Class 对象表示一个基本类型，则此方法返回 false
 7.创建泛型数组：不能直接创建泛型数组
 编译错误：
   Holder<String> holders=new Holder<String>[3];
   T[] t=new T[3];
  需要先创建Object[]类型数组，再通过转型创建。
   Holder<String> holders=(Holder[String])new Object[3];
     T[] t=(T[])new Object[3];
    编译期的类型检查：
        public T[] getArray(int size){
            tArray= (T[]) new Object[size];
            return tArray; }

        Holder<String> holder=new Holder<String>("aaa");
        String[] s=holder.getArray(2);
        Integer[] i=holder.getArray(2);//compiler error
        String[] s=holder.getArray(3);runtime error L Object cannot cast to L String
8.extends关键字声明泛型边界。如 <T extends Book>
  可以声明最多一个类型，多个接口，用 & 连接 ，类必须在接口之前。
  <T extends class & interface1 & interface2 >
9.父类持有一个泛型参数，也会被子类继承。且必须一致
10.数组可以发生向上转型，在运行时会得知真正的类型，不应该像数组加入不合适的类型。
    Fruit[] fruit=new Apple[5];
    fruit[0]=new Fruit();fruit[1]=new Orange();fruit[2]=new Apple();
在拥有泛型的集合容器，会在编译期检查。
11.不能将Holder<Apple>向上转型为Holder<Fruit>,但可以转型为Holder<? extends Fruit>:
12.使用通配符 ?
<? extends Fruit> 不接受任何类型的参数，除了null；返回Fruit类型
<? super Apple>  可接收Apple及其子类型参数,返回Object
13.无界通配符 <?>